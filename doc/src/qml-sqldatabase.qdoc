/*!
    \group qml-sqldatabase
    \title QML SqlDataBase Plugin
    \page qml-sqldatabase.html
    \nextpage sqldatabase-example.html

    \title SqlDataBase QML API

    \brief A QML API for the SqlDataBase module.

    QML Support for the SqlDataBase API.

    \section1 Qml Overview

    The SqlDataBase is used to connect to six different types of databases. Note you will
    have to have the drivers for these database types
    \table 50%
        \header
            \li Driver
            \li Description
        \row
            \li  QMYSQL
            \li MySql Driver
        \row
            \li QOCI
            \li Oracle Call Interface Driver
        \row
            \li  QODBC
            \li ODBC Driver (includes Microsoft SQL Server)
        \row
            \li  QPSQL
            \li PostgreSQL Driver
        \row
            \li QSQLITE
            \li SQLite version 3 or above
    \endtable

    \section2 Types

        \list
        \li SqlConnection
        \li SqlModel
        \endlist

    \section3 SqlConnection

    \l{SqlConnection} is an easy way to set up a connection and set a id to the element to call its methods .

    The code extract below shows the creation and use of an SqlDataBase instance.

    \qml

    import QtQuick 2.0
    import SqlDatabase 1.0
    // ...

    Item {
        width: 640
        height: 360

    SqlConnection{
        id:connect
        databaseType: "mysql"
        source: "127.0.0.1"
        databaseName: "Foo"
        user: "User"
        password: "12345"
        port: 3306
    }

        MouseArea {
            id: playArea
            anchors.fill: parent
            onPressed:  {
                connect.createConnection();
            }
        }
    }

    \endqml

    The snippet above shows how the set the id of a item so that we can all its method  createConnection()
    This is what creates the connection of the Database and Must be called in order to connecto to the desired database.
      databaseType allows us to connect to a desired tyoe of database (mysql, sql, sqlite, postgres)


    Much of the getting / setting of \l SqlConnection parameters is done through properties. These include
    \table 70%
        \header
            \li Property
            \li Description
        \row
            \li  databaseType
            \li The Type of database you want to connect to (mysql, sql, sqlite, postgres)
        \row
            \li source
            \li Set the source of the Database.
        \row
            \li  databaseName
            \li Sets the Name of the DataBase that you want to connect to.
        \row
            \li  user
            \li Sets the User to Login to the DataBase if Needed
        \row
            \li password
            \li Set the Password if needed for the user to login.
        \row
            \li port
            \li Set the Open port in which to connect with if needed
    \endtable

    The set of signals available allow the developer to create custom behavior when the following events occur,

    \table 70%
        \header
            \li Signal
            \li Description
        \row
            \li createConnection()
            \li Called when wanting to create a connection .
    \endtable

    \section4 SqlModel

    \l SqlModel enables us to make querys on are database and create models out of these querysfor use in ListViews and other Views
    See the Example File tableview to see how to make a Table like View. Here is a Example of Creating a model with a mysql driver

 \qml
import QtQuick 2.0
import SqlDatabase 1.0
// ...
Item{
Component{
    id: sqlDel
    Item {
    // ....
    }


ListView{
    id:list
    //.....
    model:   sqlModelFinal
    delegate: sqlDel

  Component.onCompleted: {
        // setup connection
        connect.createConnection();

        // use the C++ function to query the selected database
        // in the future this will be in the propertys of qml
       sqlModelFinal.setQuery("
                                SELECT *
                                FROM  `inputgroup`
                                ORDER BY  `inputgroup`.`cardinputid` ASC
                                LIMIT 0 , 30
                                ")
    }
}
SqlModel{
    id: sqlModelFinal
}

SqlConnection{
    id:connect
    databaseType: "mysql"
}
}
}

    \endqml


    \l SqlModel is used to call the method setQuery which in turn makes a Model out of the table or whatever
    it is that you. It uses the Coloumn Names of the Tables to Make up the Role Names that are In turn Used in the Deleageate.

    \table 70%
        \header
            \li Signal
            \li Description
        \row
            \li setQuery
            \li Set the Query of the Model that you wish to create. .
    \endtable
    \annotatedlist sqldatabase_qml
*/
